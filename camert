<template>
  <v-app>
    <v-card>
    <v-toolbar
        color="#00ACBB"
        dense
          dark="true"
        >
          <v-app-bar-nav-icon></v-app-bar-nav-icon>
          <v-toolbar-title>MRO收料</v-toolbar-title>
          <v-spacer></v-spacer>
          <input type="file" accept="image/*" capture id="photoInput" style="visibility: hidden"/> <!--style="visibility: hidden"-->
          <v-btn icon @click="refresh()">
            <v-icon>mdi-refresh</v-icon>
          </v-btn>
        </v-toolbar>
    </v-card>
    <v-container>
    <v-bottom-navigation v-model="value" grow>
      <v-btn value="recent" @click="openCamera()">
        <span>拍照</span>
        <v-icon>mdi-camera</v-icon>
      </v-btn>

      <v-btn value="favorites" @click="dialogPo=true">
        <span>手動輸入</span>
        <v-icon>mdi-format-list-checks</v-icon>
      </v-btn>

      <v-btn value="nearby" @click="toSap()">
        <span>上抛SAP</span>
        <v-icon>mdi-cloud-upload-outline</v-icon>
      </v-btn>
    </v-bottom-navigation>
      <v-row class="mt-10">
        <v-col >
          <v-text-field outlined dense label="PO" disabled v-model="poNo"></v-text-field>
        </v-col>
        <v-col>
          <v-text-field outlined dense label="廠別" disabled v-model="plant"></v-text-field>
        </v-col>
        <v-col>
          <v-text-field outlined dense label="供應商" disabled v-model="vender"></v-text-field>
        </v-col>
        <v-col>
          <v-text-field outlined dense label="成本中心" disabled v-model="costcenter"></v-text-field>
        </v-col>
        <v-col>
          <v-text-field outlined dense label="請購者" disabled  v-model="requester"></v-text-field>
        </v-col>
        <v-col>
          <v-text-field outlined dense label="SAP No." disabled  v-model="sapNo"></v-text-field>
        </v-col>
      </v-row>
      <v-data-table
        v-model="selected"
        :loading="loading"
        :headers="header"
        :items="result"
        :single-select="singleSelect"
        fixed-header
        show-select
        item-key="PoItem"
      >
      <template v-slot:top>
    </template>
      <template v-slot:[`item.Quantity`]="{ item }">
        <v-text-field
              :label="item.Quantity"
              :value="item.Quantity"
              v-model="itemQuantity[item.PoItem]"
              solo
              dense
              style="width: 100px"
            >{{item.Quantity}}</v-text-field>
      </template>
    </v-data-table>
    </v-container>
    <v-dialog
      max-width="300"
      v-model="dialogPo">
      <v-card>
        <v-card-title dense><v-icon dense>mdi-lead-pencil</v-icon>輸入PO</v-card-title>
        <v-divider></v-divider>
        <v-card-text>
          <v-text-field outlined dense class="mt-3" v-model="po"></v-text-field>
        </v-card-text>
        <v-card-actions>
        <v-btn block
              color="#00ACBB"
              @click="query()"
              style="margin-top: -30px;"
            >
              確定
            </v-btn>
        </v-card-actions>
      </v-card>
    </v-dialog>
    <v-dialog
      max-width="auto"
      v-model="dialogConfirm">
      <v-card>
        <v-card-title dense><v-icon dense>mdi-check-all</v-icon>确认</v-card-title>
        <v-divider></v-divider>
        <v-card-text>
          <v-data-table
        :headers="confirmHeader"
        :items="confirmResult">

          </v-data-table>
        </v-card-text>
        <v-card-actions>
        <v-btn block
              color="#00ACBB"
              @click="runToSap()"
              style="margin-top: -30px;"
            >
              確定
            </v-btn>
        </v-card-actions>
      </v-card>
    </v-dialog>
  </v-app>
</template>
<script>
import { uploadFile, getSaveMro, getPO, delPO, getMro, mroToSAP, confirmToSap, runSap } from '@/api/api.js'
import axios from '@/api/axios'
export default{
  data () {
    return {
      imgDefault:{
      type:String ,
      default:''
      },
      timer: null,
      dialogPo: false,
      loading: false,
      po: '',
      poNo: '',
      plant: '',
      vender: '',
      costcenter: '',
      requester: '',
      header: [
        {text: 'PoItem', value: 'PoItem'},
        {text: 'Material', value: 'Material'},
        {text: 'Description', value: 'Description'},
        {text: '數量', value: 'Quantity'}
      ],
      confirmHeader: [
        {text: 'PoItem', value: 'PoItem'},
        {text: 'Material', value: 'Material'},
        {text: '數量', value: 'Quantity'}
      ],
      result: [],
      confirmResult: [],
      isGetMro: false,
      itemQuantity: {},
      dialogConfirm: false,
      singleSelect: false,
      selected: [],
      whileCount: 0,
      sapNo: '',
      file: ''
    }
  },
  create () {
    this.isGetMro = false
  },
  mounted() {
    this.camera()
  },
  methods: {
    openCamera() {
      document.getElementById('photoInput').click()
    },
    camera() {
      // 获取input和img元素
      const photoInput = document.getElementById('photoInput')
      const photoImg = document.getElementById('photoImg')
      const that = this
      const input = document.querySelector('input[type=file]');
      photoInput.onchange = function() {
        if (input.files && input.files[0]) {
          // 使用FileReader来读取文件并减小尺寸
          const reader = new FileReader();
          reader.onload = function(e) {
            // 假设你使用canvas来减小尺寸
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            const img = new Image();
            img.onload = function() {
              // 调整canvas大小并重新绘制图片
              // 假设你想要的大小是原图的50%
              canvas.width = img.width * 0.5;
              canvas.height = img.height * 0.5;
              ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
      
              // 将canvas的内容转换为blob
              canvas.toBlob(function(blob) {
                // 使用axios上传处理过的blob
                const formData = new FormData();
                var url = 'MRO\\Tmp'
                formData.append('url', url)
                formData.append('image', blob);
                axios.post('https://10.140.193.210/Android/Liteon/UploadFile', formData, {
                  headers: {
                    'Content-Type': 'multipart/form-data'
                  }
                })
                .then(response => {
                  // 处理响应
                })
                .catch(error => {
                  // 处理错误
                });
              }, 'image/jpeg', 0.5); // 0.5是压缩质量
            };
            img.src = e.target.result;
          };
          reader.readAsDataURL(input.files[0]);
          that.isGetMro = true
          that.callRunGetPO()
        }
      };
      // 监听input元素的change事件
      // photoInput.addEventListener('change', function(event) {
      //   // 获取选择的照片文件
      //   that.file = event.target.files[0]
      //   const file = event.target.files[0]
      //   // 使用FileReader对象读取文件内容
      //   const reader = new FileReader()
      //   reader.onload = function(event) {
      //     // 将读取到的照片内容赋值给img元素的src属性
      //     photoImg.src = event.target.result
      //   }
      //   reader.readAsDataURL(file)
      //   var formData = new FormData()
      //   var url = 'MRO\\Tmp'
      //   formData.append('url', url)
      //   formData.append('file', file)
      //   axios({
      //     method:"post",
      //     url:'https://10.140.193.210/Android/Liteon/UploadFile',
      //     data:formData,
      //     headers:{'Content-Type': 'multipart/form-data'},
      //   }).then((res) => {
      //       }
      //   ).catch(err=>{
      //     console.log(err);
      //     alert(JSON.stringify(err))
      //   })
      //   that.isGetMro = true
      //   that.callRunGetPO()
      //   // that.getPO()
      //   // if(that.isGetMro){
      //   //   that.callRunGetPO()
      //   // }
      // })
    },
    beforeDestroy() {
      clearInterval(this.timer); // 在组件销毁前清除定时器
      this.timer = null
      this.loading = false
      this.isGetMro = false
    },
    callRunGetPO() {
      this.loading = true
      const that = this
      that.timer = setInterval(() => {
          if(that.isGetMro && that.whileCount <= 3) {
            setTimeout(that.getPO(), 2000)
          } else {
            that.beforeDestroy()
            that.$message({
              type: 'error',
              message: '拍照圖片未識別到PO'
            })
          }
          that.whileCount++
        }, 10000)
      
    },
    async getPO(){
      console.log('call:' + this.isGetMro)
      const resp = await getPO()
      console.log(JSON.stringify(resp))
      if(resp.data.length > 0) {
        this.beforeDestroy()
        this.isGetMro = false
        this.po = resp.data[0].PONO
        this.dialogPo = true
        this.loading = false
        await delPO()
      }
      // if(resp.data.length === 0) {
      //   this.beforeDestroy()
      //   this.isGetMro = false
      //   await delPO()
      //   // this.getPO()
      // } else {
      //   this.po = resp.data.Table[0].PONO
      //   this.dialogPo = true
      //   // this.loading = false
      //   // const para = {
      //   //   PoNumber: resp.data.Table[0].PONO
      //   // }
      //   // const mro = await getMro(para)
      //   // this.result = mro.data
      //   // this.poNo = this.result[0].PoNumber
      //   // this.plant = this.result[0].PlantID
      //   // this.vender = this.result[0].VenderName
      //   // this.costcenter = this.result[0].CostCenter
      //   // this.requester = this.result[0].Requester
      //   this.beforeDestroy()
      //   this.isGetMro = false
      // }
    },
    async query() {
      const para = {
        PoNumber: this.po
      }
      const resp = await getSaveMro(para)
      if(resp.data.success === 0) {
        this.$message({
          type: 'error',
          message: resp.data.errmsg
        })
        return
      }
      this.result = resp.data
      if(this.result.length === 0) {
        this.$message({
          type: 'error',
          message: '没有查询到数据'
        })
      }
      this.poNo = this.result[0].PoNumber
      this.plant = this.result[0].PlantID
      this.vender = this.result[0].VenderName
      this.costcenter = this.result[0].CostCenter
      this.requester = this.result[0].Requester
      this.dialogPo = false
    },
    async toSap(){
      if(this.selected.length == 0) {        
        this.$message({
          type: 'error',
          message: '請先選擇Item'
        })
        return
      }
      var item = []
      const parsedObject = JSON.parse(JSON.stringify(this.itemQuantity))
      var keyVal = Object.entries(parsedObject).map(([key, value]) => {
        return { Key: key, Value: value };
      })
      for(var i = 0; i < keyVal.length; i++) {
        const para = {
          PoNumber: this.poNo,
          Item: keyVal[i].Key,
          Qty: keyVal[i].Value
        }
        const resp = await mroToSAP(para)
      }
      for(var j = 0; j < this.selected.length; j++) {
        item.push(this.selected[j].PoItem)
      }
      const para = {
        PoNumber: this.poNo,
        chooseItem: item
      }
      const resConfirm = await confirmToSap(para)
      this.confirmResult = resConfirm.data
      this.dialogConfirm = true
    },
    async runToSap() {
      var item = []
      for(var i = 0; i < this.confirmResult.length; i++) {
        item.push(this.confirmResult[i].PoItem)
      }
      const para = {
        PoNumber: this.poNo,
        chooseItem: item
      }
      const resp = await runSap(para)
      if(resp.data.success === 0) {
        this.$message({
          type: 'error',
          message: resp.data.errmsg
        })
        return
      }
      if(resp.data !== '') {
        this.$message({
          type: 'success',
          message: '抛賬成功,SAP返回單號: ' + resp.data
        })
        this.sapNo = resp.data
      }
      this.dialogConfirm = false
    },
    refresh() {
      location.reload()
    },
    async fileUpload() {
       var formData = new FormData();
        var url = 'MRO\\Tmp'
        formData.append('url', url)
        formData.append('file', this.file)
      await axios({
        method:"post",
        url:'https://10.140.193.210/Android/Liteon/UploadFile',
        data:formData,
        headers:{'Content-Type': 'multipart/form-data'},
      }).then((res) => {
            alert(JSON.stringify(res))
          }
      ).catch(err=>{
        console.log(err);
        alert(JSON.stringify(err))
      })
        // var formData = new FormData();
        // var url = 'MRO\\Tmp'
        // formData.append('url', url)
        // formData.append('file', this.file)
        // axios.post('https://10.140.193.210/Android/Liteon/UploadFile', formData, {
        //   headers: {
        //     'Content-Type': 'multipart/form-data'
        //   }
        // })
        // .then(response => {
        //   alert(JSON.stringify(response))
        //   // 处理响应数据
        //   // this.$messageBox.success(response.data)
        //   console.log(response)
        // })
        // .catch(error => {
        //   alert(JSON.stringify(error))
        //   // 处理错误情况
        //   // this.$messageBox.error(error)
        //   console.log(error)
        // });
      }
  }
}
</script>
